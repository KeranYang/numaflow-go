syntax = "proto3";

option go_package = "github.com/numaproj/numaflow-go/pkg/apis/proto/source/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package source.v1;

service UserDefinedSource {
  // Read returns a stream of datum responses
  // the size of the returned DatumResponseList is smaller or equal to the num_records specified in ReadRequest.
  rpc Read(ReadRequest) returns (stream DatumResponseList);

  // Ack acknowledges a list of datum offsets.
  // it indicates that the datum stream has been processed by the source vertex.
  rpc Ack(AckRequest) returns (AckResponseList);

  // Pending returns the number of pending records at the user defined source.
  rpc Pending(google.protobuf.Empty) returns (PendingResponse);

  // IsReady is the heartbeat endpoint for gRPC.
  rpc IsReady(google.protobuf.Empty) returns (ReadyResponse);
}

message EventTime {
  // event_time is the time associated with each datum.
  google.protobuf.Timestamp event_time = 1;
  // future we can add an enum to represent whether the event time is
  // based on INGEST_TIME or EVENT_TIME or PROCESSING_TIME
}

/**
 * DatumResponse represents a datum response element.
 */
message DatumResponse {
  // payload is the payload of the datum.
  bytes payload = 1;
  // offset is the offset information of the datum.
  Offset offset = 2;
  // keys is an optional list of keys associated with the datum.
  // key is the "key" attribute in (key,value) as in the map-reduce paradigm.
  // we add this optional field to support the use case where the user defined source can provide keys for the datum.
  // e.g. Kafka and Redis Stream message usually include information about the keys.
  repeated string keys = 3;
  // event_time is the time associated with each datum.
  // we add this optional field to support the use case where the user defined source can provide event time for the datum.
  // e.g. Kafka and Redis Stream message usually include information about the event time.
  EventTime event_time = 4;
}

/**
 * DatumResponseList represents a list of datum response elements.
 */
message DatumResponseList {
  repeated DatumResponse elements = 1;
}

/*
 * AckRequest is the request for acknowledging datum.
 * it takes a list of offsets to be acknowledged.
 */
message AckRequest {
  repeated Offset offsets = 1;
}

/*
 * AckResponseList represents a list of ack response elements.
 */
message AckResponseList {
  repeated Offset offsets = 1;
}

/**
 * ReadyResponse is the health check result.
 */
message ReadyResponse {
  bool ready = 1;
}

/**
 * ReadRequest is the request for reading datum stream from user defined source.
 */
message ReadRequest {
  // num_records is the number of records to read.
  uint64 num_records = 1;
}

/**
 * Offset is the offset of the datum.
 */
message Offset {
  // offset is the offset of the datum.
  // we define Offset as a byte array because different input data sources can have different representations for Offset.
  // the only way to generalize it is to define it as a byte array,
  // such that we can let the UDSource to de-serialize the offset using its own interpretation logics.
  bytes offset = 1;
  // is_acked indicates whether the offset is successfully acknowledged by the user defined source.
  bool is_acked = 2;
}

/**
 * PendingResponse is the response for the pending request.
 */
message PendingResponse {
  // count is the number of pending records at the user defined source.
  uint64 count = 1;
}
